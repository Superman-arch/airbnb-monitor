# Multi-stage build for production-ready backend
# Optimized for Jetson Orin Nano Super

# Stage 1: Builder
FROM nvcr.io/nvidia/l4t-ml:r36.2.0-py3 AS builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    libssl-dev \
    libffi-dev \
    libpq-dev \
    python3-dev \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements
COPY backend/requirements.txt .

# Install Python dependencies
RUN pip3 install --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir -r requirements.txt

# Stage 2: Runtime
FROM nvcr.io/nvidia/l4t-ml:r36.2.0-py3

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r security && useradd -r -g security security

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY backend/ ./backend/
COPY detection/ ./detection/
COPY tracking/ ./tracking/
COPY notifications/ ./notifications/
COPY config/ ./config/

# Create necessary directories
RUN mkdir -p storage logs && \
    chown -R security:security /app

# Set environment variables
ENV PYTHONPATH=/app:${PYTHONPATH:-} \
    PYTHONUNBUFFERED=1 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility,video \
    OPENBLAS_NUM_THREADS=1 \
    MKL_NUM_THREADS=1

# Enable Jetson clocks for maximum performance
RUN echo "#!/bin/bash\njetson_clocks" > /start.sh && \
    chmod +x /start.sh

# Switch to app user
USER security

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Start command
CMD ["/bin/bash", "-c", "cd /app && python3 -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 --workers 1 --loop uvloop"]