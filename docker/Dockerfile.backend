# Multi-stage build for production-ready backend
# Optimized for Jetson Orin Nano Super

# Stage 1: Builder
FROM nvcr.io/nvidia/l4t-ml:r36.2.0-py3 AS builder

# Install system dependencies including BLAS/LAPACK for lap
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    libssl-dev \
    libffi-dev \
    libpq-dev \
    python3-dev \
    python3-pip \
    gfortran \
    libopenblas-dev \
    liblapack-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements
COPY backend/requirements.txt .

# Install Python dependencies with ARM64 compatibility
RUN pip3 install --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir Cython numpy scipy && \
    # Try to install lap, but don't fail if it doesn't work on ARM64
    (pip3 install --no-cache-dir lap --no-build-isolation || echo "WARNING: lap installation failed, using SimpleTracker fallback") && \
    pip3 install --no-cache-dir -r requirements.txt

# Stage 2: Runtime
FROM nvcr.io/nvidia/l4t-ml:r36.2.0-py3

# Install runtime dependencies and video libraries
RUN apt-get update && apt-get install -y \
    libpq5 \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libglib2.0-0 \
    curl \
    v4l-utils \
    udev \
    && rm -rf /var/lib/apt/lists/*

# Create app user and add to video group for camera access
RUN groupadd -r security && \
    useradd -r -g security -G video,plugdev security && \
    usermod -a -G video security

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY backend/ ./backend/
COPY detection/ ./detection/
COPY tracking/ ./tracking/
COPY notifications/ ./notifications/
COPY utils/ ./utils/
COPY storage/ ./storage/
COPY config/ ./config/

# Copy startup script
COPY docker/startup.sh /startup.sh
RUN chmod +x /startup.sh

# Create necessary directories and set permissions
RUN mkdir -p /app/storage /app/logs && \
    chown -R security:security /app && \
    chmod 755 /app/logs /app/storage

# Set environment variables
ENV PYTHONPATH=/app:${PYTHONPATH:-} \
    PYTHONUNBUFFERED=1 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility,video \
    OPENBLAS_NUM_THREADS=1 \
    MKL_NUM_THREADS=1

# Enable Jetson clocks for maximum performance
RUN echo "#!/bin/bash\njetson_clocks" > /start.sh && \
    chmod +x /start.sh

# Run as root for camera device access
# Note: Running as root for hardware access to /dev/video*
USER root

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Start command - use startup script
CMD ["/startup.sh"]